package com.liuyinxin.other;

import java.util.Arrays;

/**
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 *
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 */
public class 有效的数独_36 {

    public static void main(String[] args) {
        有效的数独_36 s = new 有效的数独_36();
        
        char[][] sd = new char[][]{
                {'5','3','.','.','7','.','.','.','.'},
                {'6','.','.','1','9','5','.','.','.'},
                {  '.','9','8','.','.','.','.','6','.'},
                { '8','.','.','.','6','.','.','.','3'},
                {'4','.','.','8','.','3','.','.','1'},
                {'7','.','.','.','2','.','.','.','6'},
                {'.','6','.','.','.','.','2','8','.'},
                {'.','.','.','4','1','9','.','.','5'},
                {'.','.','.','.','8','.','.','7','9'}
        };
        
        sd = new char[][]{
  {'8','3','.','.','7','.','.','.','.'},
  {'6','.','.','1','9','5','.','.','.'},
  {'.','9','8','.','.','.','.','6','.'},
  {'1','.','.','.','6','.','.','.','3'},
  {'4','.','.','8','.','3','.','.','1'},
  {'7','.','.','.','2','.','.','.','6'},
  {'.','6','.','.','.','.','2','8','.'},
  {'.','.','.','4','1','9','.','.','5'},
  {'.','.','.','.','8','.','.','7','9'}
        };
        
        sd = new char[][]{
        {'.','.','.','.','5','.','.','1','.'},
        {'.','4','.','3','.','.','.','.','.'},
        {'.','.','.','.','.','3','.','.','1'},
        {'8','.','.','.','.','.','.','2','.'},
        {'.','.','2','.','7','.','.','.','.'},
        {'.','1','5','.','.','.','.','.','.'},
        {'.','.','.','.','.','2','.','.','.'},
        {'.','2','.','9','.','.','.','.','.'},
        {'.','.','4','.','.','.','.','.','.'}
        };

        System.out.println(
                s.isValidSudoku(sd)
        );
    }

    public boolean isValidSudoku(char[][] board) {

        // 检查一个横行
        int[] freq = new int[10];
        // 清零
        init(freq);
        int index;
        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j){
                index = board[i][j];
                if (index == '.') continue;
                else index = index  - '0';
                if (freq[index] > 0) return false;
                ++freq[index];
            }
            init(freq);
        }
//        第j行i个
        for (int i =0; i < 9; ++i){
            for (int j = 0; j < 9; ++j){
                index = board[j][i];
                if (index == '.') continue;
                index -= '0';
                if (freq[index] > 0) return false;
                ++freq[index];
            }
            init(freq);
        }



        for (int i = 0 ; i < 9; i+=3){
            for (int j = 0; j < 9; j+=3){
                for (int x = i + 2; x >= i; --x){
                    for (int y = j + 2; y >= j; --y){
                        index = board[x][y];
                        if (index == '.') continue;
                        index-= '0';
                        if (freq[index] > 0) return false;
                        ++freq[index];
                    }
                }
                init(freq);
            }
        }

        return true;
    }

    public void init (int[] arr) {
        for (int i = 0; i < arr.length; ++i){
            arr[i] = 0;
        }

    }

}
